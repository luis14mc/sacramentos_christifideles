
-- ============================================================================
-- ChristiFidelis v3 (PostgreSQL) - Multi-Parroquia (multi-tenant) + Config
-- Fecha: 2025-08-25
-- Nota: Este archivo crea un esquema listo para usar en PostgreSQL 15+
--       Conserva los CAMPOs esenciales de tu modelo original y añade
--       soporte multi-parroquia usando la columna id_parroquia (tenant).
--       Incluye RLS (Row Level Security), tablas de configuración y
--       unicidades por parroquia para libros/folios/registros.
-- ============================================================================

-- Recomendación: crear previamente la base de datos y luego ejecutar:
--   \c christi_fidelis
--   SET search_path TO public;
-- ============================================================================

BEGIN;

-- ------------------------
-- Extensiones útiles
-- ------------------------
CREATE EXTENSION IF NOT EXISTS citext;     -- emails case-insensitive
-- CREATE EXTENSION IF NOT EXISTS pgcrypto; -- si deseas hash de contraseñas en DB

-- ------------------------
-- Enum/Checks sugeridos
-- ------------------------
-- sexo: 'F' o 'M'
-- estado_vital: 0=fallecido, 1=vivo, 2=desaparecido
-- estado_activo_parroquia: 0=inactivo, 1=activo

-- ============================================================================
-- CATÁLOGOS TERRITORIALES
-- ============================================================================
DROP TABLE IF EXISTS municipio CASCADE;
DROP TABLE IF EXISTS departamento CASCADE;

CREATE TABLE departamento (
  codigo_departamento CHAR(2) PRIMARY KEY,
  nombre_departamento VARCHAR(55) NOT NULL
);

CREATE TABLE municipio (
  codigo_municipio CHAR(4) PRIMARY KEY,
  codigo_departamento CHAR(2) NOT NULL REFERENCES departamento(codigo_departamento) ON DELETE RESTRICT ON UPDATE RESTRICT,
  nombre_municipio VARCHAR(55) NOT NULL
);

-- ============================================================================
-- PARROQUIA (TENANT) + CONFIGURACIÓN
-- ============================================================================
DROP TABLE IF EXISTS parroquia_config CASCADE;
DROP TABLE IF EXISTS parroquia CASCADE;

CREATE TABLE parroquia (
  id_parroquia SMALLINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre VARCHAR(100) NOT NULL,
  ubicacion CHAR(4) NOT NULL,    -- FK a municipio(codigo_municipio)
  direccion VARCHAR(1000) NOT NULL,
  telefono VARCHAR(100) NOT NULL,
  email VARCHAR(255),
  CONSTRAINT fk_parroquia_muni FOREIGN KEY (ubicacion) REFERENCES municipio(codigo_municipio) ON DELETE RESTRICT ON UPDATE RESTRICT
);

CREATE TABLE parroquia_config (
  id_parroquia SMALLINT PRIMARY KEY REFERENCES parroquia(id_parroquia) ON DELETE CASCADE,
  alias_liturgico VARCHAR(150),
  logo_url TEXT,
  sello_digital_url TEXT,
  tz TEXT DEFAULT 'America/Tegucigalpa',
  idioma CHAR(2) DEFAULT 'es',
  opciones JSONB NOT NULL DEFAULT '{}'::jsonb,  -- colores, pie de constancia, etc.
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- Plantillas de constancia por sacramento (HTML/Markdown con placeholders)
DROP TABLE IF EXISTS plantilla_constancia CASCADE;
CREATE TABLE plantilla_constancia (
  id BIGSERIAL PRIMARY KEY,
  id_parroquia SMALLINT NOT NULL REFERENCES parroquia(id_parroquia) ON DELETE CASCADE,
  sacramento TEXT NOT NULL,            -- 'bautismo','primera_comunion','confirmacion','matrimonio'
  nombre VARCHAR(100) NOT NULL,
  contenido TEXT NOT NULL,             -- HTML/Markdown
  activo BOOLEAN NOT NULL DEFAULT TRUE,
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  UNIQUE (id_parroquia, sacramento, nombre)
);

-- Parametrización flexible por parroquia
DROP TABLE IF EXISTS parroquia_parametro CASCADE;
CREATE TABLE parroquia_parametro (
  id BIGSERIAL PRIMARY KEY,
  id_parroquia SMALLINT NOT NULL REFERENCES parroquia(id_parroquia) ON DELETE CASCADE,
  clave TEXT NOT NULL,
  valor JSONB NOT NULL DEFAULT '{}'::jsonb,
  UNIQUE(id_parroquia, clave)
);

-- Numeradores por sacramento/libro/folio/registro (control de correlativos)
DROP TABLE IF EXISTS numeradores CASCADE;
CREATE TABLE numeradores (
  id BIGSERIAL PRIMARY KEY,
  id_parroquia SMALLINT NOT NULL REFERENCES parroquia(id_parroquia) ON DELETE CASCADE,
  modulo TEXT NOT NULL,                  -- 'bautismo','confirmacion','primera_comunion','matrimonio'
  scope TEXT NOT NULL DEFAULT 'general', -- opcional: por sector/capilla/año
  ultimo_libro INT DEFAULT 0,
  ultimo_folio INT DEFAULT 0,
  ultimo_acta INT DEFAULT 0,
  ultimo_registro INT DEFAULT 0,
  UNIQUE (id_parroquia, modulo, scope)
);

-- ============================================================================
-- ROLES / PÁGINAS / USUARIOS
-- ============================================================================
DROP TABLE IF EXISTS tr_rol_pagina CASCADE;
DROP TABLE IF EXISTS pagina CASCADE;
DROP TABLE IF EXISTS usuario CASCADE;
DROP TABLE IF EXISTS rol_usuario CASCADE;

CREATE TABLE rol_usuario (
  id_rol SMALLINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre VARCHAR(55) NOT NULL,
  descripcion VARCHAR(500),
  estado SMALLINT NOT NULL DEFAULT 1,         -- 0=Inactivo, 1=Activo
  fecha_creacion TIMESTAMPTZ NOT NULL DEFAULT now(),
  id_usuario_creacion BIGINT NOT NULL
);

CREATE TABLE pagina (
  id_pagina SMALLINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre VARCHAR(100) NOT NULL,
  descripcion VARCHAR(1000),
  url TEXT NOT NULL,
  estado SMALLINT NOT NULL DEFAULT 1,         -- 0=Inactiva, 1=Activa
  fecha_creacion TIMESTAMPTZ NOT NULL DEFAULT now(),
  id_usuario_creacion BIGINT NOT NULL
);

CREATE TABLE tr_rol_pagina (
  id_rol SMALLINT NOT NULL REFERENCES rol_usuario(id_rol) ON DELETE RESTRICT ON UPDATE RESTRICT,
  id_pagina SMALLINT NOT NULL REFERENCES pagina(id_pagina) ON DELETE RESTRICT ON UPDATE RESTRICT,
  puede_ver SMALLINT NOT NULL DEFAULT 1,
  puede_crear SMALLINT NOT NULL DEFAULT 0,
  puede_actualizar SMALLINT NOT NULL DEFAULT 0,
  puede_borrar SMALLINT NOT NULL DEFAULT 0,
  PRIMARY KEY (id_rol, id_pagina)
);

CREATE TABLE usuario (
  id_usuario BIGSERIAL PRIMARY KEY,
  id_parroquia SMALLINT NOT NULL REFERENCES parroquia(id_parroquia) ON DELETE RESTRICT ON UPDATE RESTRICT,
  id_rol SMALLINT NOT NULL REFERENCES rol_usuario(id_rol) ON DELETE RESTRICT ON UPDATE RESTRICT,
  nombre VARCHAR(100) NOT NULL,
  email CITEXT NOT NULL UNIQUE,
  contrasena BYTEA NOT NULL,
  telefono VARCHAR(100),
  estado SMALLINT NOT NULL DEFAULT 1,             -- 0=Inactivo, 1=Activo
  fecha_creacion TIMESTAMPTZ NOT NULL DEFAULT now(),
  id_usuario_creacion BIGINT NOT NULL
);

-- ============================================================================
-- ÓRDENES/CLERO
-- ============================================================================
DROP TABLE IF EXISTS orden_sacerdotal CASCADE;
DROP TABLE IF EXISTS rango_orden_sacerdotal CASCADE;
DROP TABLE IF EXISTS orden_religiosa CASCADE;

CREATE TABLE orden_religiosa (
  id_orden_religiosa SMALLINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre VARCHAR(200) NOT NULL,
  nombre_latin VARCHAR(100),
  abreviatura VARCHAR(15),
  descripcion VARCHAR(1000),
  rama CHAR(1) NOT NULL CHECK (rama IN ('F','M','N'))   -- F=Femenina, M=Masculina, N=Ninguna
);

CREATE TABLE rango_orden_sacerdotal (
  id_rango_sacerdotal SMALLINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre VARCHAR(55) NOT NULL,
  descripcion VARCHAR(200)
);

CREATE TABLE orden_sacerdotal (
  numero_identidad VARCHAR(20) NOT NULL,
  id_rango_sacerdotal SMALLINT NOT NULL REFERENCES rango_orden_sacerdotal(id_rango_sacerdotal),
  id_parroquia SMALLINT NOT NULL REFERENCES parroquia(id_parroquia) ON DELETE RESTRICT ON UPDATE RESTRICT,
  id_orden_religiosa SMALLINT NOT NULL REFERENCES orden_religiosa(id_orden_religiosa) ON DELETE RESTRICT ON UPDATE RESTRICT,
  nombres VARCHAR(55) NOT NULL,
  apellidos VARCHAR(55) NOT NULL,
  fecha_nacimiento DATE,
  lugar_nacimiento CHAR(4),  -- FK sugerida: municipio(codigo_municipio)
  telefono VARCHAR(100),
  email VARCHAR(255),
  otra_orden_religiosa VARCHAR(255),
  es_parroco SMALLINT NOT NULL DEFAULT 0,      -- 0=No, 1=Si
  estado_vital SMALLINT NOT NULL DEFAULT 1 CHECK (estado_vital IN (0,1,2)),
  imagen VARCHAR(300),
  PRIMARY KEY (numero_identidad),              -- conservamos PK original
  UNIQUE (id_parroquia, numero_identidad)      -- habilita FKs compuestas por parroquia + identidad
);

-- ============================================================================
-- SECTORES PARROQUIALES
-- ============================================================================
DROP TABLE IF EXISTS sector_parroquial CASCADE;
DROP TABLE IF EXISTS tipo_sector_parroquial CASCADE;

CREATE TABLE tipo_sector_parroquial (
  id_tipo_sector_parroquial SMALLINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre VARCHAR(100) NOT NULL,
  descripcion VARCHAR(1000)
);

CREATE TABLE sector_parroquial (
  id_sector_parroquial BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_parroquia SMALLINT NOT NULL REFERENCES parroquia(id_parroquia) ON DELETE RESTRICT ON UPDATE RESTRICT,
  id_tipo_sector_parroquial SMALLINT NOT NULL REFERENCES tipo_sector_parroquial(id_tipo_sector_parroquial) ON DELETE RESTRICT ON UPDATE RESTRICT,
  nombre VARCHAR(55) NOT NULL,
  nombre_capilla VARCHAR(55),
  direccion VARCHAR(1000) NOT NULL
);

-- ============================================================================
-- PERSONA (multi-parroquia)
-- ============================================================================
DROP TABLE IF EXISTS persona CASCADE;

CREATE TABLE persona (
  numero_identidad VARCHAR(20) NOT NULL,
  id_parroquia SMALLINT NOT NULL REFERENCES parroquia(id_parroquia) ON DELETE RESTRICT ON UPDATE RESTRICT,
  id_sector_parroquial BIGINT NOT NULL REFERENCES sector_parroquial(id_sector_parroquial) ON DELETE RESTRICT ON UPDATE RESTRICT,
  id_orden_religiosa SMALLINT NOT NULL REFERENCES orden_religiosa(id_orden_religiosa) ON DELETE RESTRICT ON UPDATE RESTRICT,
  nombres VARCHAR(55) NOT NULL,
  apellidos VARCHAR(55) NOT NULL,
  fecha_nacimiento DATE NOT NULL,
  lugar_nacimiento CHAR(4) NOT NULL REFERENCES municipio(codigo_municipio) ON DELETE RESTRICT ON UPDATE RESTRICT,
  sexo CHAR(1) NOT NULL CHECK (sexo IN ('F','M')),
  telefono VARCHAR(100) NOT NULL,
  email CITEXT,
  direccion VARCHAR(1000),
  estado_vital SMALLINT NOT NULL DEFAULT 1 CHECK (estado_vital IN (0,1,2)),
  estado_activo_parroquia SMALLINT NOT NULL CHECK (estado_activo_parroquia IN (0,1)),
  otra_orden_religiosa VARCHAR(255),
  imagen VARCHAR(300),
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  PRIMARY KEY (id_parroquia, numero_identidad)  -- clave compuesta por parroquia + identidad
);

CREATE INDEX persona_apellidos_idx ON persona(id_parroquia, apellidos);

-- ============================================================================
-- GRUPOS PARROQUIALES
-- ============================================================================
DROP TABLE IF EXISTS tr_persona_grupo_rol CASCADE;
DROP TABLE IF EXISTS rol_parroquial CASCADE;
DROP TABLE IF EXISTS grupo_parroquial CASCADE;

CREATE TABLE grupo_parroquial (
  id_grupo_parroquial SMALLINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre VARCHAR(255) NOT NULL,
  descripcion VARCHAR(2500)
);

CREATE TABLE rol_parroquial (
  id_rol_parroquial SMALLINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre VARCHAR(255) NOT NULL,
  descripcion VARCHAR(2500)
);

CREATE TABLE tr_persona_grupo_rol (
  numero_identidad VARCHAR(20) NOT NULL,
  id_parroquia SMALLINT NOT NULL,   -- para mantener multi-tenant en la relación
  id_grupo_parroquial SMALLINT NOT NULL REFERENCES grupo_parroquial(id_grupo_parroquial) ON DELETE RESTRICT ON UPDATE RESTRICT,
  id_rol_parroquial SMALLINT NOT NULL REFERENCES rol_parroquial(id_rol_parroquial) ON DELETE RESTRICT ON UPDATE RESTRICT,
  PRIMARY KEY (id_parroquia, numero_identidad, id_grupo_parroquial, id_rol_parroquial),
  FOREIGN KEY (id_parroquia, numero_identidad) REFERENCES persona(id_parroquia, numero_identidad) ON DELETE RESTRICT ON UPDATE RESTRICT
);

-- ============================================================================
-- SACRAMENTOS (manteniendo campos esenciales + unicidades por parroquia)
-- ============================================================================
DROP TABLE IF EXISTS bautismo CASCADE;
CREATE TABLE bautismo (
  id_bautismo BIGSERIAL PRIMARY KEY,
  id_parroquia SMALLINT NOT NULL REFERENCES parroquia(id_parroquia) ON DELETE RESTRICT ON UPDATE RESTRICT,
  numero_identidad_bautizado VARCHAR(20) NOT NULL,
  numero_identidad_madre VARCHAR(20) NOT NULL,
  numero_identidad_padre VARCHAR(20) NOT NULL,
  numero_identidad_madrina VARCHAR(20) NOT NULL,
  numero_identidad_padrino VARCHAR(20) NOT NULL,
  numero_identidad_catequista VARCHAR(20) NOT NULL,
  numero_identidad_sacerdote VARCHAR(20) NOT NULL,
  fecha_bautismo TIMESTAMPTZ NOT NULL,
  numero_folio TEXT NOT NULL,
  numero_libro TEXT NOT NULL,
  numero_pagina TEXT NOT NULL,
  numero_registro TEXT NOT NULL,
  nota_marginal VARCHAR(1000),
  -- FKs compuestas hacia persona (mismo id_parroquia)
  FOREIGN KEY (id_parroquia, numero_identidad_bautizado) REFERENCES persona(id_parroquia, numero_identidad),
  FOREIGN KEY (id_parroquia, numero_identidad_madre)     REFERENCES persona(id_parroquia, numero_identidad),
  FOREIGN KEY (id_parroquia, numero_identidad_padre)     REFERENCES persona(id_parroquia, numero_identidad),
  FOREIGN KEY (id_parroquia, numero_identidad_madrina)   REFERENCES persona(id_parroquia, numero_identidad),
  FOREIGN KEY (id_parroquia, numero_identidad_padrino)   REFERENCES persona(id_parroquia, numero_identidad),
  FOREIGN KEY (id_parroquia, numero_identidad_catequista)REFERENCES persona(id_parroquia, numero_identidad),
  -- Compuesta hacia orden_sacerdotal (habilitada por UNIQUE(id_parroquia, numero_identidad))
  FOREIGN KEY (id_parroquia, numero_identidad_sacerdote) REFERENCES orden_sacerdotal(id_parroquia, numero_identidad),
  -- Unicidad por parroquia del registro en libro/folio/página
  UNIQUE (id_parroquia, numero_libro, numero_pagina, numero_registro)
);
CREATE INDEX bautismo_fecha_idx ON bautismo(id_parroquia, fecha_bautismo);

DROP TABLE IF EXISTS primera_comunion CASCADE;
CREATE TABLE primera_comunion (
  id_primera_comunion BIGSERIAL PRIMARY KEY,
  id_parroquia SMALLINT NOT NULL REFERENCES parroquia(id_parroquia) ON DELETE RESTRICT ON UPDATE RESTRICT,
  numero_identidad_persona VARCHAR(20) NOT NULL,
  numero_identidad_madre VARCHAR(20) NOT NULL,
  numero_identidad_padre VARCHAR(20) NOT NULL,
  numero_identidad_catequista VARCHAR(20) NOT NULL,
  numero_identidad_sacerdote VARCHAR(20) NOT NULL,
  fecha_primera_comunion TIMESTAMPTZ NOT NULL,
  numero_acta TEXT NOT NULL,
  numero_libro TEXT NOT NULL,
  numero_pagina TEXT NOT NULL,
  numero_registro TEXT NOT NULL,
  nota_marginal VARCHAR(1000),
  FOREIGN KEY (id_parroquia, numero_identidad_persona)  REFERENCES persona(id_parroquia, numero_identidad),
  FOREIGN KEY (id_parroquia, numero_identidad_madre)    REFERENCES persona(id_parroquia, numero_identidad),
  FOREIGN KEY (id_parroquia, numero_identidad_padre)    REFERENCES persona(id_parroquia, numero_identidad),
  FOREIGN KEY (id_parroquia, numero_identidad_catequista) REFERENCES persona(id_parroquia, numero_identidad),
  FOREIGN KEY (id_parroquia, numero_identidad_sacerdote)  REFERENCES orden_sacerdotal(id_parroquia, numero_identidad),
  UNIQUE (id_parroquia, numero_libro, numero_pagina, numero_registro)
);
CREATE INDEX primera_comunion_fecha_idx ON primera_comunion(id_parroquia, fecha_primera_comunion);

DROP TABLE IF EXISTS confirmacion CASCADE;
CREATE TABLE confirmacion (
  id_confirmacion BIGSERIAL PRIMARY KEY,
  id_parroquia SMALLINT NOT NULL REFERENCES parroquia(id_parroquia) ON DELETE RESTRICT ON UPDATE RESTRICT,
  numero_identidad_confirmado VARCHAR(20) NOT NULL,
  numero_identidad_madre VARCHAR(20) NOT NULL,
  numero_identidad_padre VARCHAR(20) NOT NULL,
  numero_identidad_madrina VARCHAR(20) NOT NULL,
  numero_identidad_padrino VARCHAR(20) NOT NULL,
  numero_identidad_catequista VARCHAR(20) NOT NULL,
  numero_identidad_obispo VARCHAR(20) NOT NULL,
  fecha_confirmacion TIMESTAMPTZ NOT NULL,
  numero_acta TEXT NOT NULL,
  numero_libro TEXT NOT NULL,
  numero_pagina TEXT,
  numero_registro TEXT NOT NULL,
  nota_marginal VARCHAR(1000),
  FOREIGN KEY (id_parroquia, numero_identidad_confirmado) REFERENCES persona(id_parroquia, numero_identidad),
  FOREIGN KEY (id_parroquia, numero_identidad_madre)      REFERENCES persona(id_parroquia, numero_identidad),
  FOREIGN KEY (id_parroquia, numero_identidad_padre)      REFERENCES persona(id_parroquia, numero_identidad),
  FOREIGN KEY (id_parroquia, numero_identidad_madrina)    REFERENCES persona(id_parroquia, numero_identidad),
  FOREIGN KEY (id_parroquia, numero_identidad_padrino)    REFERENCES persona(id_parroquia, numero_identidad),
  FOREIGN KEY (id_parroquia, numero_identidad_catequista) REFERENCES persona(id_parroquia, numero_identidad),
  FOREIGN KEY (id_parroquia, numero_identidad_obispo)     REFERENCES orden_sacerdotal(id_parroquia, numero_identidad),
  UNIQUE (id_parroquia, numero_libro, numero_pagina, numero_registro)
);
CREATE INDEX confirmacion_fecha_idx ON confirmacion(id_parroquia, fecha_confirmacion);

DROP TABLE IF EXISTS matrimonio CASCADE;
CREATE TABLE matrimonio (
  id_matrimonio BIGSERIAL PRIMARY KEY,
  id_parroquia SMALLINT NOT NULL REFERENCES parroquia(id_parroquia) ON DELETE RESTRICT ON UPDATE RESTRICT,
  numero_identidad_esposa VARCHAR(20) NOT NULL,
  numero_identidad_esposo VARCHAR(20) NOT NULL,
  numero_identidad_madrina VARCHAR(20) NOT NULL,
  numero_identidad_padrino VARCHAR(20) NOT NULL,
  numero_identidad_sacerdote VARCHAR(20) NOT NULL,
  numero_identidad_madre_esposa VARCHAR(20),
  numero_identidad_padre_esposa VARCHAR(20),
  numero_identidad_madre_esposo VARCHAR(20),
  numero_identidad_padre_esposo VARCHAR(20),
  fecha_matrimonio TIMESTAMPTZ NOT NULL,
  numero_acta TEXT NOT NULL,
  numero_libro TEXT NOT NULL,
  numero_pagina TEXT,
  numero_registro TEXT NOT NULL,
  nota_marginal VARCHAR(1000),
  FOREIGN KEY (id_parroquia, numero_identidad_esposa) REFERENCES persona(id_parroquia, numero_identidad),
  FOREIGN KEY (id_parroquia, numero_identidad_esposo) REFERENCES persona(id_parroquia, numero_identidad),
  FOREIGN KEY (id_parroquia, numero_identidad_madrina) REFERENCES persona(id_parroquia, numero_identidad),
  FOREIGN KEY (id_parroquia, numero_identidad_padrino) REFERENCES persona(id_parroquia, numero_identidad),
  FOREIGN KEY (id_parroquia, numero_identidad_madre_esposa) REFERENCES persona(id_parroquia, numero_identidad),
  FOREIGN KEY (id_parroquia, numero_identidad_padre_esposa) REFERENCES persona(id_parroquia, numero_identidad),
  FOREIGN KEY (id_parroquia, numero_identidad_madre_esposo) REFERENCES persona(id_parroquia, numero_identidad),
  FOREIGN KEY (id_parroquia, numero_identidad_padre_esposo) REFERENCES persona(id_parroquia, numero_identidad),
  FOREIGN KEY (id_parroquia, numero_identidad_sacerdote) REFERENCES orden_sacerdotal(id_parroquia, numero_identidad),
  UNIQUE (id_parroquia, numero_libro, numero_pagina, numero_registro)
);
CREATE INDEX matrimonio_fecha_idx ON matrimonio(id_parroquia, fecha_matrimonio);

-- ============================================================================
-- BITÁCORAS / HISTORIA
-- ============================================================================
DROP TABLE IF EXISTS bitacora_persona_parroquia CASCADE;
DROP TABLE IF EXISTS bitacora_login CASCADE;
DROP TABLE IF EXISTS bitacora_crud CASCADE;

CREATE TABLE bitacora_crud (
  id_accion BIGSERIAL PRIMARY KEY,
  id_parroquia SMALLINT NOT NULL REFERENCES parroquia(id_parroquia),
  id_usuario BIGINT NOT NULL,
  accion CHAR(1) NOT NULL CHECK (accion IN ('C','R','U','D')),
  id_tabla_afectado BIGINT,
  nombre_tabla VARCHAR(100) NOT NULL,
  fecha TIMESTAMPTZ NOT NULL DEFAULT now(),
  old_values JSONB,
  new_values JSONB,
  actor_ip INET,
  user_agent TEXT
);

CREATE TABLE bitacora_login (
  id_ingreso BIGSERIAL PRIMARY KEY,
  id_usuario BIGINT NOT NULL,
  fecha_ingreso TIMESTAMPTZ NOT NULL DEFAULT now(),
  actor_ip INET,
  user_agent TEXT
);

CREATE TABLE bitacora_persona_parroquia (
  id_registro BIGSERIAL PRIMARY KEY,
  numero_identidad VARCHAR(20) NOT NULL,
  id_parroquia SMALLINT NOT NULL REFERENCES parroquia(id_parroquia),
  es_parroco SMALLINT NOT NULL DEFAULT 0,   -- historial párrocos
  fecha_ingreso TIMESTAMPTZ NOT NULL DEFAULT now(),
  fecha_salida TIMESTAMPTZ
);

-- ============================================================================
-- TRIGGERS de actualización de updated_at
-- ============================================================================
DROP FUNCTION IF EXISTS set_updated_at() CASCADE;
CREATE OR REPLACE FUNCTION set_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at := now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS tg_uppar_config ON parroquia_config;
CREATE TRIGGER tg_uppar_config BEFORE UPDATE ON parroquia_config
FOR EACH ROW EXECUTE FUNCTION set_updated_at();

DROP TRIGGER IF EXISTS tg_uppersona ON persona;
CREATE TRIGGER tg_uppersona BEFORE UPDATE ON persona
FOR EACH ROW EXECUTE FUNCTION set_updated_at();

DROP TRIGGER IF EXISTS tg_upplantilla ON plantilla_constancia;
CREATE TRIGGER tg_upplantilla BEFORE UPDATE ON plantilla_constancia
FOR EACH ROW EXECUTE FUNCTION set_updated_at();

-- ============================================================================
-- RLS (Row Level Security) por parroquia
-- Usa:  SET app.tenant_id = '<id_parroquia_del_usuario>';
-- ============================================================================
ALTER TABLE persona ENABLE ROW LEVEL SECURITY;
CREATE POLICY persona_por_parroquia ON persona
  USING (id_parroquia = current_setting('app.tenant_id')::int);

ALTER TABLE bautismo ENABLE ROW LEVEL SECURITY;
CREATE POLICY bautismo_por_parroquia ON bautismo
  USING (id_parroquia = current_setting('app.tenant_id')::int);

ALTER TABLE primera_comunion ENABLE ROW LEVEL SECURITY;
CREATE POLICY primera_comunion_por_parroquia ON primera_comunion
  USING (id_parroquia = current_setting('app.tenant_id')::int);

ALTER TABLE confirmacion ENABLE ROW LEVEL SECURITY;
CREATE POLICY confirmacion_por_parroquia ON confirmacion
  USING (id_parroquia = current_setting('app.tenant_id')::int);

ALTER TABLE matrimonio ENABLE ROW LEVEL SECURITY;
CREATE POLICY matrimonio_por_parroquia ON matrimonio
  USING (id_parroquia = current_setting('app.tenant_id')::int);

ALTER TABLE bitacora_crud ENABLE ROW LEVEL SECURITY;
CREATE POLICY bitacora_crud_por_parroquia ON bitacora_crud
  USING (id_parroquia = current_setting('app.tenant_id')::int);

-- (Puedes extender RLS a más tablas según necesidad)

-- ============================================================================
-- VISTAS DE APOYO (ejemplos)
-- ============================================================================
DROP VIEW IF EXISTS v_bautismo_certificado CASCADE;
CREATE VIEW v_bautismo_certificado AS
SELECT
  b.id_bautismo,
  b.id_parroquia,
  p_b.nombres || ' ' || p_b.apellidos AS bautizado,
  b.fecha_bautismo,
  b.numero_libro,
  b.numero_pagina,
  b.numero_registro,
  b.numero_folio,
  b.nota_marginal,
  sp.nombre_capilla,
  sp.nombre AS sector,
  pr.nombre AS parroquia_nombre
FROM bautismo b
JOIN persona p_b ON (p_b.id_parroquia = b.id_parroquia AND p_b.numero_identidad = b.numero_identidad_bautizado)
JOIN sector_parroquial sp ON sp.id_sector_parroquial = p_b.id_sector_parroquial
JOIN parroquia pr ON pr.id_parroquia = b.id_parroquia;

-- ============================================================================
-- ÍNDICES SUGERIDOS
-- ============================================================================
CREATE INDEX persona_identidad_idx ON persona(numero_identidad);
CREATE INDEX usuario_parroquia_idx ON usuario(id_parroquia, id_rol);
CREATE INDEX bitacora_crud_tabla_idx ON bitacora_crud(id_parroquia, nombre_tabla, fecha);

COMMIT;

-- ============================================================================
-- USO DE RLS EN LA APP:
--   SET app.tenant_id = '2'; -- por ejemplo, al autenticar al usuario
--   SELECT * FROM persona;   -- devolverá solo registros de esa parroquia
-- ============================================================================
